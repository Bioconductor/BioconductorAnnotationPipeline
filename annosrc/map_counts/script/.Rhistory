dbGetQuery(goold, "select count(*) from go_term;")
dbGetQuery(gonew, "select count(*) from go_term;")
head(mfolduniq)
length(unique(mfolduniq))
unique(mfolduniq)
mfold <- dbGetQuery(goold, "select distinct go_id, ontology from go_term inner join go_mf_offspring using(_id);")[,1]
mfnew <- dbGetQuery(gonew, "select distinct go_id, ontology from go_term inner join go_mf_offspring using(_id);")[,1]
length(mfold)
length(mfnew)
setdiff(mfold, mfnew)
dbGetQuery(goold, "select distinct go_id, term, ontology from go_term inner join go_mf_offspring where go_term._id=go_mf_offspring._offspring_id;")
dbGetQuery(goold, "select * from go_term where go_id='GO:0003674';")
dbGetQuery(goold, "select distinct go_id, term, ontology from go_term inner join go_mf_offspring on go_term._id=go_mf_offspring._offspring_id where go_mf_offspring._id='2690';")
kz <- dbGetQuery(goold, "select distinct go_id, term, ontology from go_term inner join go_mf_offspring on go_term._id=go_mf_offspring._offspring_id where go_mf_offspring._id='2690';")
dim(kz)
head(kz)
dbGetQuery(goold, "select distinct(*) from go_mf_offspring where _id=2690';")
dbGetQuery(goold, "select distinct * from go_mf_offspring where _id=2690';")
dbGetQuery(goold, "select distinct * from go_mf_offspring where _id='2690';")
head(kz)
dbGetQuery(goold, "select * from go_term where go_id='GO:0005550';")
dbGetQuery(goold, "select distinct * from go_mf_offspring where _id='4214';")
dbGetQuery(goold, "select * from go_term where _id='43337';")
dbGetQuery(gonew, "select * from go_term where go_id='GO:0005550';")
dbGetQuery(gonew, "select distinct * from go_mf_offspring where _id='4208';")
dbGetQuery(goold, "select count(distinct *) from go_mf_offspring;")
dbGetQuery(goold, "select count (distinct _id, _offspring_id) from go_mf_offspring;")
dbGetQuery(goold, "select count (distinct _offspring_id) from go_mf_offspring;")
dbGetQuery(gonew, "select count (distinct _offspring_id) from go_mf_offspring;")
q()
canine <- dbConnect(SQLite(), "../../db/chipsrc_canine.sqlite")
dbListTables(canine)
dbGetQuery(canine, "select * from map_counts limit 10;")
dbGetQuery(canine, "select * from map_metadata limit 10;")
dbGetQuery(canine, "select * from cytogenetic_locations limit 10;")
library(canine.db0)
drv <- dir(paste0(path.package("canine.db0"), "/extdata"), "sqlite", full.names = TRUE)
drv
canineold <- dbConnect(SQLite(), drv[2])
dbGetQuery(canineold, "select * from cytogenetic_locations limit 10;")
rhesus <- dbConnect(SQLite(), "../../db/chipsrc_rhesus.sqlite")
library(rhesus.db0)
drv <- dir(paste0(path.package("rhesus.db0"), "/extdata"), "sqlite", full.names = TRUE)
rhesusold <- dbConnect(SQLite(), drv[2])
dbListTables(rhesusold)
dbGetQuery(rhesusold, "select * from chrlengths limit 10;")
dbGetQuery(rhesus, "select * from chrlengths limit 10;")
dbGetQuery(rhesusold, "select * from chrlengths limit;")
dbGetQuery(rhesusold, "select * from chrlengths;")
dbGetQuery(rhesusold, "select count(*) from chrlengths;")
dbGetQuery(rhesusnew, "select count(*) from chrlengths;")
dbGetQuery(rhesus, "select count(*) from chrlengths;")
dbGetQuery(rhesus, "select * from chrlengths;")
library(GO.db)
head(toTable(MFOFFSPRING))
search()
ls(2)
head(toTable(GOMFOFFSPRING))
dim(toTable(GOMFOFFSPRING))
?lm
library(tximport)
getwd()
q()
dblst
dbs
getwd()
dbs
dblst
dblst[sapply(length(dblst))]
dblst[sapply(length(dblst)>0)]
dblst[sapply(dblst, length) > 0]
q()
q()
getwd()
setwd("../../dbs")
setwd("../../db/")
debug(checkMissDat)
dir()
checkMissDat("chipsrc_arabidopsis.sqlite")
tables
tables
missrow
misrow
con <- dbConnect(SQLite(), "chipsrc_arabidopsis.sqlite")
z <- dbGetQuery(con, "select * from pubmed;")
head(z)
sum(is.na(z[,1]))
sum(is.na(z[,2]))
dbGetQuery(con, "select * from pubmed where _id AND pubmed_id limit 10;")
dbListFields(con, "aracyc")
dbGetQuery(con, "select * from aracyc where _id AND pathway_name limit 10;")
cols <- dbListFields(con, "pubmed")
cols <- paste0(cols[-1], "=''")
cols
dbGetQuery(con, "select * from pubmed where pubmed = '' limit 10;")
dbGetQuery(con, "select * from pubmed where pubmed_id = '' limit 10;")
dbDisconnect(con)
Q
dbDisconnect(con)
q()
